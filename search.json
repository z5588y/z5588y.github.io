[{"title":"CloudDrive2","url":"/2025/01/03/CloudDrive2%E9%83%A8%E7%BD%B2/","content":" CloudDrive2\n可以把各大网盘挂载到本地，搭建影音库等\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -d \\    --name clouddrive \\    --restart unless-stopped \\    --env CLOUDDRIVE_HOME=/Config \\    -v &lt;path to accept cloud mounts&gt;:/CloudNAS:shared \\    -v &lt;path to app data&gt;:/Config \\    -v &lt;other local shared path&gt;:/media:shared \\    --network host \\    --pid host \\    --privileged \\    --device /dev/fuse:/dev/fuse \\    cloudnas/clouddrive2version: \"2.1\"services:  cloudnas:    image: cloudnas/clouddrive2    container_name: clouddrive2    environment:      - TZ=Asia/Shanghai      - CLOUDDRIVE_HOME=/Config    volumes:      - &lt;path to accept cloud mounts&gt;:/CloudNAS:shared      - &lt;path to app data&gt;:/Config      - &lt;other local shared path&gt;:/media:shared #主机的媒体路径    devices:      - /dev/fuse:/dev/fuse    restart: unless-stopped    pid: \"host\"    privileged: true    network_mode: \"host\"\n          \n\n\n\ndocker命令解释\n\n\n\n\n\n参数\n解释\n\n\n​​--name​\n容器名字\n\n\n​​-v​\n资源挂载到容器，冒号分隔 本地目录文件:容器目录文件\n\n\n​​-p​\n本地端口绑定到容器端口，冒号分隔 本地端口:容器端口\n\n\n​​--net=host​\n容器所使用的网络模式。\n\n\n​​--restart​\n启动模式\n\n\n​cloudnas/clouddrive2​\n镜像名字，​\n\n\n\n 初始化\n部署好后 http://localhost:19798 访问\n点击查看官方文档\n","categories":["娱乐"],"tags":["docker","网盘","影视库","教程"]},{"title":"IYUU部署","url":"/2025/01/03/IYUU%E9%83%A8%E7%BD%B2/","content":" IYUU部署\n\n安装时需要挂载两个目录和一个端口；\n容器内目录/iyuu和/data为固定值，他们是兄弟关系，不是父子关系，切勿套娃。\n本地目录/root/iyuu挂载到容器内/iyuu（存放源码）；\n本地目录/root/data挂载到容器内/data（存放mysql数据库）；\n你可以自定义本地目录​ ​/root/iyuu​​和​ ​/root/data​\n\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -itd \\    -v /root/iyuu:/iyuu \\    -v /root/data:/data \\    -p 8780:8780 \\    --name IYUUPlus \\    --restart=always \\    iyuucn/iyuuplus-dev:latestversion: '3.8'  # 使用适当的Docker Compose文件版本services:  iyuuplus:    image: iyuucn/iyuuplus-dev:latest  # 指定要使用的镜像    container_name: IYUUPlus  # 设置容器的名称    restart: always  # 设置重启策略为总是重启    ports:      - \"8780:8780\"  # 端口映射    volumes:      - /root/iyuu:/iyuu  # 卷挂载，宿主机目录到容器目录      - /root/data:/data  # 卷挂载，宿主机目录到容器目录\n          \n\n\n\ndocker命令解释\n\n\n\n\n\n参数\n解释\n\n\n​​--name​\n容器名字\n\n\n​​-v​\n资源挂载到容器，冒号分隔 本地目录文件:容器目录文件\n\n\n​​-p​\n本地端口绑定到容器端口，冒号分隔 本地端口:容器端口\n\n\n​​--net=host​\n容器所使用的网络模式。\n\n\n​​--restart​\n启动模式\n\n\n​​iyuucn/iyuuplus-dev:latest​\n​​iyuu/iyuuplus-dev​是镜像名字，​latest​是标签名\n\n\n\n 初始化\n部署好后 http://localhost:8780 访问\n点击查看官方文档\n","categories":["娱乐"],"tags":["docker","教程","PT","辅种"]},{"title":"OneNav","url":"/2025/01/03/OnaNav/","content":" OneNav导航页\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run \\  -d \\  --name onenav \\  -p 3080:80 \\  -v /data/onenav:/data/wwwroot/default/data \\  helloz/onenavversion: '3'services:  onenav:    container_name: onenav    ports:      - \"3080:80\"    volumes:      - './data:/data/wwwroot/default/data'    image: 'helloz/onenav'    restart:      always\n          \n 指令修改部分如下\n\n3080：第1个3080端口为访问端口，可自行修改，第2个80为容器内部端口，请不要修改\n/data/onenav：本机挂载目录，用于持久存储Onenav数据\n/data/wwwroot/default/data：这个路径请不要修改，否则会造成数据丢失\n\n如果您是国内网络环境，无法拉取Docker进行，可以使用我们提供的镜像加速地址，只需要将上面的helloz/onenav改成pub.tcp.mk/helloz/onenav即可\n 初始化\n安装完毕后访问http://IP:3080完成初始化操作！\n","categories":["娱乐"],"tags":["docker","导航","实用"]},{"title":"Markdown语法","url":"/2025/01/03/Markdown%E8%AF%AD%E6%B3%95/","content":" 解释写作添加功能的语法指令！！！\nMarkdown 是一种 「 轻量级标记语言 」 ，用途广泛，使用简洁的语法代替常见排版格式，从而能使我们专心于写作，在最大程度上提高效率。Markdown 的语法十分简单，常用的标记符号也不超过十个，学习成本极低，一旦熟悉这种语法规则，将会有一劳永逸的效果。\n\nWe believe that writing is about content, about what you want to say – not about fancy formatting.\n我们坚信写作写的是内容，所思所想，而不是花样格式。\n\n 标题\n标记符：#\n标题是文章最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只需在这段文字前加 # 标记符。\n例如：\n\n# 一级标题\n## 二级标题\n## 三级标题\n……\n\n以此类推，共六级标题，对应 HTML 的 H1  ~  H6。\n 字体加粗\n标记符：** 或 __\n在需要表示为粗体的文字内容，用两个 ** 或 __ 标记符包裹。\n例如：**字体加粗** 或 __字体加粗__\n\n 斜体\n标记符：* 或 _\n在需要表示为斜体的文字内容，用两个 * 或 _ 标记符包裹。\n例如：*斜体* 或 _斜体_\n\n 引用\n标记符：&gt;\n只需在引用的文字内容前面加上 &gt; 标记符，就可以出现引用的效果。\n例如：&gt; 我是引用的句子哦\n\n 列表\n 无序列表\n标记符：- 或 + 或 *\n在需要表示为无序列表的文字前加 - 或 + 或 * 标记符。\n\n 有序列表\n标记符：1. 或 2. 或 3. ……\n在需要表示为有序列表的文字前面添加加 1. 或 2. 或 3. …… 标记符。\n\n 链接\n标记符：[]()\n在 Markdown 中，插入链接，例如：[XPoet Blog](https://xtpoet.cn)\n\n 图片\n标记符：![]()\n图片示例：![aliyun](https://img.alicdn.com/tfs/TB1Ly5oS3HqK1RjSZFPXXcwapXa-238-54.png)\n\n 代码\n 单行代码\n标记符： ** **    ** **\n需要引用代码时，如果引用的代码只有一行，可以用两个  ** ` **  标记符将代码包裹起来。例如：\n\n 多行代码\n标记符： ** **    ** **\n多行代码，用两个  ** ``` **  标记符将代码块包裹起来。例如：\n\n 分割线\n标记符：*** 或 --- 或 ___\n插入分割线，在一行中用三个以上的 * 或 - 或 _ 标记符来建立一个分隔线，行内不能有其他内容，分隔符独占一行。\n\n 删除线\n标记符：~~\n在需要添加删除线的文字内容，用两个 ~~ 标记符包裹。\n例如：~~ABC~~ ABC\n 换行\n标记符： 两个空格符 加 回车\n在 Markdown 中进行换行，需在文字后面键入 两个空格符 加 回车。\n 表格\n在 Markdown 中插入表格的标记符比较复杂，大家直接看效果，需要用到时过来复制代码。\n 默认表格样式\n参考代码：\nColName1 | ColName2 | ColName3---------|----------|---------ColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValue\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n\n 表格列调整\n表格的列位置调整（默认左对齐，:------: 居中，------: 右对齐）\n参考代码：\n|ColName1 | ColName2 | ColName3||---------|:--------:|--------:||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue|\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n\n由于不同平台的 Markdown CSS 存在差异，实际显示效果跟本文也会有所不同。\n","categories":["教程"],"tags":["写作","语法","指令"]},{"title":"lucky部署","url":"/2025/01/03/lucky%E9%83%A8%E7%BD%B2/","content":" lucky部署\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run \\  --name lucky \\  --network host \\  --restart always \\  -v /volume1/docker/lucky:/goodluck \\  -d \\  gdy666/lucky:latestversion: '3'services:  lucky:    image: gdy666/lucky:latest    container_name: lucky    ports:      - \"16601:16601\"    volumes:      - /volume1/docker/lucky:/goodluck    restart: always    network_mode: host\n          \n 指令修改部分如下\n\n\n/volume1/docker/lucky 改成自己想要映射的文件夹\n\n\n 初始化\n部署好后 http://localhost:16601 访问\n\n默认账户名：666\n默认密码：666\n\n 进入设置后可以更改账户及密码\n\n\n\n外网访问\n禁用安全入口设置检查\n设置账号密码\n以上三步需要操作，防止远程无法访问！！！\n\n\n","categories":["娱乐"],"tags":["docker","教程","实用","写作","分享"]},{"title":"Zdir","url":"/2025/01/03/Zdir/","content":" Zdir\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run \\  docker run --privileged -d --name=\"zdir\" \\  -v /opt/zdir/data:/opt/zdir/data \\  -v /data/public:/opt/zdir/data/public \\  -v /data/private:/opt/zdir/data/private \\  -p 6080:6080 \\  --restart=always \\  helloz/zdir:4version: '3.3'services:    zdir:        container_name: zdir        privileged: true        volumes:            - '/opt/zdir/data:/opt/zdir/data'            - '/data/public:/opt/zdir/data/public'            - '/data/private:/opt/zdir/data/private'        ports:            - '6080:6080'        restart: always        image: 'helloz/zdir:4'\n          \n 指令修改部分如下\n\n第二列/opt/zdir/data为容器路径，里面保存了Zdir数据库和配置等信息，请勿修改\n第二列/opt/zdir/data/public为容器内Zdir公有目录，请勿修改\n第二列/opt/zdir/data/private为容器内Zdir私有目录，请勿修改\n第一列目录为您的主机目录，可自行修改\n\n如果您是国内网络环境，无法拉取Docker进行，可以使用我们提供的镜像加速地址，只需要将上面的helloz/zdir:4改成pub.tcp.mk/helloz/zdir:4即可\n 初始化\n安装完毕后访问http://IP:6080完成初始化操作！\n","categories":["娱乐"],"tags":["docker","实用","分享","文件"]},{"title":"qbittorrent","url":"/2025/01/03/qbittorrent%E9%83%A8%E7%BD%B2/","content":" qbittorrent\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -d \\  --name=qbittorrent \\  -e PUID=1000 \\  -e PGID=1000 \\  -e TZ=Etc/UTC \\  -e WEBUI_PORT=7070 \\  -e TORRENTING_PORT=6881 \\  -p 7070:8080 \\  -p 6881:6881 \\  -p 6881:6881/udp \\  -v /path/to/qbittorrent/appdata:/config \\  -v /path/to/downloads:/downloads `#optional` \\  --restart unless-stopped \\  lscr.io/linuxserver/qbittorrent:latest---services:  qbittorrent:    image: lscr.io/linuxserver/qbittorrent:latest    container_name: qbittorrent    environment:      - PUID=1000      - PGID=1000      - TZ=Etc/UTC      - WEBUI_PORT=7070      - TORRENTING_PORT=6881    volumes:      - /path/to/qbittorrent/appdata:/config      - /path/to/downloads:/downloads #optional    ports:      - 7070:8080      - 6881:6881      - 6881:6881/udp    restart: unless-stopped\n          \nWEBUI_PORT=7070\n-p 7070:8080\n以上两项参数的 7070 端口可以自定义，但是WEBUI的访问端口要保持跟自己定义的端口一直！\n\n/path/to/qbittorrent/appdata  应用文件，映射自己的文件夹路径\n/path/to/downloads  下载的目录，映射自己的文件夹路径\n\n 安装完毕后访问http://IP:7070操作！\n\n用户名 admin\n密码 随机的,看运行日记\n\n\nWEB访问不了解决方式：\n找到qbittorrent.conf文件结尾添加以下两项参数\n\nWebUI\\HostHeaderValidation=falseWebUI\\HTTPS\\Enabled=false\n","categories":["娱乐"],"tags":["docker","PT","下载"]},{"title":"showdoc部署","url":"/2025/01/03/showdoc%E9%83%A8%E7%BD%B2/","content":" showdoc部署\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -d --name showdoc --user=root --privileged=true -p 5099:80  --restart always -v /volume1/docker/showdoc:/var/www/html/ star7th/showdocversion: '3.8'services:  showdoc:    image: star7th/showdoc    container_name: showdoc    user: root    privileged: true    ports:      - \"5099:80\"    restart: always    volumes:      - /volume1/docker/showdoc:/var/www/html/\n          \n 指令修改部分如下\n\n\n5099 可以改成自己想要的端口\n/volume1/docker/showdoc 改成自己想要映射的文件夹\n\n\n 初始化\n部署好后 http://localhost:5099 访问\n\n默认账户名：showdoc\n默认密码：123456\n\n 进入设置后可以更改密码\n","categories":["娱乐"],"tags":["docker","教程","实用","写作","分享"]},{"title":"transmission","url":"/2025/01/03/transmission/","content":" transmission\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -d \\  --name=transmission \\  -e PUID=1000 \\  -e PGID=1000 \\  -e TZ=Etc/UTC \\  -e TRANSMISSION_WEB_HOME= `#optional` \\  -e USER= `#optional` \\  -e PASS= `#optional` \\  -e WHITELIST= `#optional` \\  -e PEERPORT= `#optional` \\  -e HOST_WHITELIST= `#optional` \\  -p 9091:9091 \\  -p 51413:51413 \\  -p 51413:51413/udp \\  -v /path/to/transmission/data:/config \\  -v /path/to/downloads:/downloads \\  -v /path/to/watch/folder:/watch \\  --restart unless-stopped \\  lscr.io/linuxserver/transmission:latestservices:  transmission:    image: lscr.io/linuxserver/transmission:latest    container_name: transmission    environment:      - PUID=1000      - PGID=1000      - TZ=Etc/UTC      - TRANSMISSION_WEB_HOME= #optional      - USER= #optional      - PASS= #optional      - WHITELIST= #optional      - PEERPORT= #optional      - HOST_WHITELIST= #optional    volumes:      - /path/to/transmission/data:/config      - /path/to/downloads:/downloads      - /path/to/watch/folder:/watch    ports:      - 9091:9091      - 51413:51413      - 51413:51413/udp    restart: unless-stopped\n          \n 指令解释如下\n\n\n\n範圍\n功能\n\n\n\n\n​​-p 9091:9091​\n網頁介面\n\n\n​​-p 51413:51413​\nTorrent 連接埠 TCP\n\n\n​​-p 51413:51413/udp​\nTorrent 連接埠 UDP\n\n\n​​-e PUID=1000​\n對於 UserID - 請參閱下面的說明\n\n\n​​-e PGID=1000​\n對於 GroupID - 請參閱下面的說明\n\n\n​​-e TZ=Etc/UTC​\n指定要使用的時區，請參閱此清單⁠。\n\n\n​​-e TRANSMISSION_WEB_HOME=​\n指定備用 UI 資料夾的路徑。\n\n\n​​-e USER=​\n指定介面的可選用戶名\n\n\n​​-e PASS=​\n為介面指定可選密碼\n\n\n​​-e WHITELIST=​\n指定逗號分隔的 IP 白名單的可選清單。填入 rpc-whitelist 設定。\n\n\n​​-e PEERPORT=​\n指定 torrent TCP/UDP 連線的選用連接埠。填充對等連接埠設定。\n\n\n​​-e HOST_WHITELIST=​\n指定逗號分隔的 dns 名稱白名單的可選清單。填入 rpc-host-whitelist 設定。\n\n\n​​-v /config​\n傳輸應儲存設定檔和日誌的位置。\n\n\n​​-v /downloads​\n下載的本地路徑。\n\n\n​​-v /watch​\n監視 torrent 檔案的資料夾。\n\n\n\n 初始化\n安装完毕后访问http://IP:9091操作！\n需要中文UI请点击此处下载\n","categories":["娱乐"],"tags":["docker","PT","下载","种子"]},{"title":"WBO白板绘画","url":"/2025/01/03/WBO%E7%99%BD%E6%9D%BF%E7%BB%98%E7%94%BB/","content":" WBO白板绘画\n提供一个白色画板，可以公共作画，也可以私有画画！\n 部署方式如下，选择其一就可。\n\n            docker cli 部署docker compose 部署docker run -it --publish 5001:80 --volume \"XXX:/opt/app/server-data\" lovasoa/wbo:latest # run wboversion: '3.8'services:  wbo:    image: lovasoa/wbo:latest    container_name: wbo_container    ports:      - \"5001:80\"    volumes:      - \"XXX:/opt/app/server-data\"    tty: true    stdin_open: true\n          \n\n第二列5001改为自己想要的端口即可\n第二列XXX映射自己的文件夹路径\n\n安装完毕后访问http://IP:5001完成初始化操作！\n","categories":["娱乐"],"tags":["docker","导航","实用"]},{"title":"docker部署标本","url":"/2025/08/23/mihomo%E9%83%A8%E7%BD%B2/","content":" docker部署项目名称\n 部署方式如下，选择其一就可（cli部署需要分开部署2个容器）。\n\n            docker cli 部署docker cli 部署docker compose 部署docker run -d \\  --name mihomo \\  --restart unless-stopped \\  --privileged \\  --network host \\  -v \"$(pwd)/mihomo:/root/.config/mihomo\" \\  metacubex/mihomodocker run -d \\  --name metacubexd-ui \\  --restart unless-stopped \\  -p 226:80 \\  --depends-on mihomo \\  mrxianyu/metacubexd-ui:latestservices:  mihomo:    image: metacubex/mihomo    container_name: mihomo    restart: unless-stopped    privileged: true    network_mode: host    volumes:      - ./mihomo:/root/.config/mihomo  metacubexd:    image: mrxianyu/metacubexd-ui:latest    restart: unless-stopped    container_name: metacubexd-ui    ports:      - '226:80'    depends_on:      - mihomo\n          \n 指令修改部分如下\n\n226：mihomo 的Web UI端口\n./mihomo：mihomo容器存储本机目录（可自己修改）\n\n mihomo容器运行后，修改mihomo目录下的config.yaml文件\n\n把下面的yaml文件复制粘贴至mihomo目录下的config.yaml文件里，或者单独创建一份yaml文件上传覆盖也行（推荐）。\n\nproxy-providers:  填入机场名:    url: \"填入自己订阅的链接\"    type: http    interval: 86400    health-check:      enable: true      url: https://www.gstatic.com/generate_204      interval: 300    proxy: 直连proxies:  - {name: 直连, type: direct} port: 7890socks-port: 7891redir-port: 7892mixed-port: 7777tproxy-port: 7894allow-lan: truebind-address: \"*\"ipv6: falseunified-delay: truetcp-concurrent: truelog-level: warningfind-process-mode: 'off'# interface-name: en0global-client-fingerprint: chromekeep-alive-idle: 600keep-alive-interval: 15disable-keep-alive: falseprofile:  store-selected: true  store-fake-ip: trueexternal-controller: 0.0.0.0:9090sniffer:  enable: true  sniff:    HTTP:      ports: [80, 8080-8880]      override-destination: true    TLS:      ports: [443, 8443]    QUIC:      ports: [443, 8443]  force-domain:    - \"+.v2ex.com\"  skip-domain:    - \"+.baidu.com\"tun:  enable: true  # system/gvisor/mixed  stack: mixed  dns-hijack: [\"any:53\", \"tcp://any:53\"]  auto-route: true  auto-redirect: true  auto-detect-interface: truedns:  enable: true  listen: 0.0.0.0:1053  ipv6: false  respect-rules: true  enhanced-mode: fake-ip  fake-ip-range: 28.0.0.1/8  fake-ip-filter-mode: blacklist  fake-ip-filter:    - \"rule-set:private_domain,cn_domain\"    - \"+.msftconnecttest.com\"    - \"+.msftncsi.com\"    - \"time.*.com\"    - \"+.market.xiaomi.com\"  default-nameserver:    - 223.5.5.5  proxy-server-nameserver:    - https://223.5.5.5/dns-query  # 使用运营商提供的DNS  nameserver:    - 218.2.2.2    - 218.4.4.4 proxy-groups:  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 📹 YouTube, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🍀 Google, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🤖 ChatGPT, type: select, proxies: [🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🐬 OneDrive, type: select, proxies: [🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🪟 Microsoft, type: select, proxies: [🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🎵 TikTok, type: select, proxies: [🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 📲 Telegram, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🎥 NETFLIX, type: select, proxies: [🔯 狮城故转, 🔯 香港故转, 🔯 日本故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: ✈️ Speedtest, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 💶 PayPal, type: select, proxies: [🔯 日本故转, 🔯 香港故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}  - {name: 🐟 漏网之鱼, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 狮城自动, ♻️ 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: \"(?i)港|hk|hongkong|hong kong\"}  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: \"(?i)日|jp|japan\"}  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: \"(?i)新加坡|坡|狮城|SG|Singapore\"}  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: \"(?i)美|us|unitedstates|united states\"}  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$\"}  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$\" }  - {name: 🔯 狮城故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$\"}  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$\" }  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$\"}  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$\" }  - {name: ♻️ 狮城自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$\" }  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: \"(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$\"}  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: \"^((?!(直连)).)*$\"}  - {name: 🌐 全部节点, type: select, include-all: true}rules:  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理  - RULE-SET,private_domain,直连  - RULE-SET,apple_domain,🍎 Apple  - RULE-SET,proxylite,🚀 默认代理  - RULE-SET,ai,🤖 ChatGPT  - RULE-SET,github_domain,👨🏿‍💻 GitHub  - RULE-SET,youtube_domain,📹 YouTube  - RULE-SET,google_domain,🍀 Google  - RULE-SET,onedrive_domain,🐬 OneDrive  - RULE-SET,microsoft_domain,🪟 Microsoft  - RULE-SET,tiktok_domain,🎵 TikTok  - RULE-SET,speedtest_domain,✈️ Speedtest  - RULE-SET,telegram_domain,📲 Telegram  - RULE-SET,netflix_domain,🎥 NETFLIX  - RULE-SET,paypal_domain,💶 PayPal  - RULE-SET,gfw_domain,🚀 默认代理  - RULE-SET,geolocation-!cn,🚀 默认代理  - RULE-SET,cn_domain,🎯 直连  - RULE-SET,google_ip,🍀 Google,no-resolve  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve  - RULE-SET,telegram_ip,📲 Telegram,no-resolve  - RULE-SET,cn_ip,🎯 直连  - MATCH,🐟 漏网之鱼rule-anchor:  ip: &amp;ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}  domain: &amp;domain {type: http, interval: 86400, behavior: domain, format: mrs}  class: &amp;class {type: http, interval: 86400, behavior: classical, format: text}rule-providers:   private_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs\"}  proxylite: { &lt;&lt;: *class, url: \"https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list\"}  ai: {  &lt;&lt;: *domain, url: \"https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs\" }  youtube_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs\"}  google_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs\"}  github_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs\"}  telegram_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs\"}  netflix_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs\"}  paypal_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs\"}  onedrive_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs\"}  microsoft_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs\"}  apple_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs\"}  speedtest_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs\"}  tiktok_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs\"}  gfw_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs\"}  geolocation-!cn: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs\"}  cn_domain: { &lt;&lt;: *domain, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs\"}    cn_ip: { &lt;&lt;: *ip, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs\"}  google_ip: { &lt;&lt;: *ip, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs\"}  telegram_ip: { &lt;&lt;: *ip, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs\"}  netflix_ip: { &lt;&lt;: *ip, url: \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs\"}\n 以上yaml文件需要修改以下2个地方：\n\n\n 修改自己的订阅链接\n\n\n 使用运营商提供的DNS\nnameserver:\n\n\n​      - 218.2.2.2\n​      - 218.4.4.4\n\n\n\n修改完后需要重启mihomo容器\n\n\n 进入Web UI\n安装完毕后访问Web UIhttp://NASIP:226，后端地址填入：http://NASIP:9090，密匙为空。(需要在局域网内才能填入)\n\n 设置语言及代理端口\n\n 食用方法\n代理地址：http://NASIP:7890\n","categories":["娱乐"],"tags":["docker","导航","实用"]},{"title":"写作语法指令","url":"/2025/01/03/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%86%99%E4%BD%9C%E6%B7%BB%E5%8A%A0%E9%A1%B9/","content":" 解释写作添加功能的语法指令！！！\n title: “写作语法指令”\n文章标题\ndate: 2025-01-03 13:23:50\ntags:\n\n写作\n语法\n指令\ncategories:\n教程\n\n password: 123456\n密码访问\n author: zoyo\n文章作者名称\n##avatar: https://xpoet.cn/images/avatar.png\n文章作者头像\n code_block_shrink:  false\n不自动收缩代码块\n mathjax: true\n数学公式渲染\n sticky: 999\n文章置顶，数字越大置顶越靠前\n aging: true##\n文章时长提醒机制，下面是设置时间，超过这个时间会出现提醒\n aging_days: 30\n30天后老化提醒\n copyright_info: false##\nfalse：关闭文章版权信息，不写的话默认是开启的\n toc: false##\n关闭文章目录\n comment: false\n关闭文章评论\n home_cover: /images/home-cover-img.png\n填写 Home 页面的封面图片链接，可以是 本地图片路径 或 图片链接\n home_cover_height: 120\n设置 Home 页面的封面图片高度，可以不填，不填则使用内置高度\n **post_cover: https://cn.bing.com/th?id=OHR.ConwyRiver_EN-US4472231451_1920x1080.jpg**##\n填写 Post 页面的封面图片链接，可以是 本地图片路径 或 图片链接。\n page_cover_title: 各位小伙伴们~~\n图片左下角加入文字\n post_cover_height: 120\n设置 Post 页面的封面图片高度，可以不填，不填则使用内置高度\n share: false\n关闭分享功能\n reward: false\n关闭打上作者功能\n tag_cloud: false\nfalse使用好看的标签云，只在标签页面生效\n template: photos\n使用source/_data 目录下新建 photos.yml 文件\n","categories":["教程"],"tags":["写作","语法","指令"]},{"title":"思源笔记","url":"/2025/01/03/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E9%83%A8%E7%BD%B2/","content":" 思源笔记\n 部署方式如下，选择其一就可。\n\n            docker compose 部署docker cli 部署version: \"3.9\"services:  main:    image: b3log/siyuan    command: ['--workspace=/siyuan/workspace/', '--accessAuthCode=z5941350.']    ports:      - 6806:6806    volumes:      - /volume1/docker/siyuanbiji:/siyuan/workspace    restart: unless-stopped    environment:      # A list of time zone identifiers can be found at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones      - TZ=Asia\\Shanghai      - PUID=1000  # 自定义用户 ID      - PGID=1000  # 自定义组 IDdocker run -d \\  -v workspace_dir_host:workspace_dir_container \\  -p 6806:6806 \\  -e PUID=1000 -e PGID=1000 \\  b3log/siyuan \\  --workspace=workspace_dir_container \\  --accessAuthCode=xxx\n          \n 指令解释如下\n\n\n\n範圍\n功能\n\n\n\n\n​​-e PUID=1000​\n自定义用户 ID（可选，如果未提供，默认为 1000）\n\n\n​​-e PGID=1000​\n自定义组 ID（可选，如果未提供，默认为 1000）\n\n\n​​workspace_dir_host​\n宿主机上的工作空间文件夹路径\n\n\n​workspace_dir_container​\n容器内工作空间文件夹路径，和后面 --workspace 指定成一样的\n\n\naccessAuthCode​\n访问授权码，请务必修改，否则任何人都可以读写你的数据\n\n\n\n 初始化\n安装完毕后访问http://IP:6806操作！\n点击此处查看官方文档\n","categories":["娱乐"],"tags":["docker","分享","笔记","记录"]}]